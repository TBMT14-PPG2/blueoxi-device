
    float AC_red=0;
    float DC_red=0;
    float AC_IR=0;
    float DC_IR=0;
    float alpha;
    float beta;
    float unfiltered[35];
    float TempVect[35];
    float CalcVector[2*k+1];
    float max_red;
    float min_red;
    float max_IR;
    float min_IR;
    float Saturation;
    int k=150;
    float lastpeaktime=0;
    float five_pulses [5];
    float pulse=0;
    float temppulse=0;
    float percentage=0;
    int maxpulse=195;
    float R;=1


function peakfound(int time)
{
   
    temppulse=0;
    for(i=0;i<5;i++)
    {
        five_pulses[i]=five_pulses[i+1];
        temppulse=temppulse+five_pulses[i];
    }
    five_pulses[5]=60/(time-lastpeaktime);
    pulse=(temppulse+five_pulses[5])/5;
    lastpeaktime=time;
    percentage=pulse/maxpulse;
    calcSat()
}


function NewValue(float X)
{
        //shift calcvector and add new filtered value
        memmove(TempVect,calcvector+1,1300);
        memmove(calcvector,TempVect,1300);
        calcvector[2*k]=FilteredValue;


            time=time+1/500;
            
            Y=0;
            for(i=0;i<=k;i++)
                {
                    if (calcvector[count-2*k+i]>calcvector[count-k])
                    {
                        break
                    }
                    else if (calcvector[count-k+i]>calcvector[count-k])
                    {
                        break
                    }
                    else
                    {
                     Y=i;
                    }
                }
                if (Y==k)
                {
                    peakfound(time)
                }
}

function calcSat()
{
    max_red=0;
    min_red=0;
    max_IR=0;
    min_IR=0;

    for(i=0;i<=400;i++)
            {
                if (redSig[count-500+i]>max_red)
                {
                    max_red=redSig[count-500+i];
                }
                else if (redSig[count-500+i]<min_red)
                {
                    min_red=redSig[count-500+i];
                }
                if (IRSig[count-500+i]>max_IR)
                {
                    max_IR=IRSig[count-500+i];
                }
                else if (IRSig[count-500+i]<min_IR)
                {
                    min_IR=IRSig[count-500+i];
                }
            }
            AC_red=max_red-min_red;
            DC_red=max_red;
            AC_IR=max_IR-min_IR;
            DC_IR=max_IR;
            R=0.8*R+0.2*(AC_red/DC_red)/(AC_IR/DC_IR);
            Saturation=alpha*R+beta;
}
