            
            //   Filtering
            
            for(i=0,i<35,i++)
            {
                filtsum=filtsum+signal[count-35+i]*filter[i];
            }
            filtered[count]=2^16-filtsum; //count=humber of samples in datavector
            time=time+1/500;
            
            
            
            
            
            
            //   Peakdetection
            
            CalcVector=2*k+1 latest samples
            max1=0;
            max2=0;
            //Look for max k samples before and after sample of intererest; Calcvector[k]
            for(i=0;i<k;i++)
            {
                if (CalcVector[i]>max1)
                {
                    max1=CalcVector[i];
                }
                if (CalcVectorfiltered[k+i+1]>max2)
                {
                    max2=CalcVector[k+i+1];
                }
            }

            if(CalcVector[k]>=max1 &&
               CalcVector[k]>=max2 &&
               time>lastpeaktime+delay)
            {
                temppulse=0;
                for(i=0;i<5;i++)
                {
                    five_pulses[i]=five_pulses[i+1];
                    temppulse=temppulse+five_pulses[i];
                }
                five_pulses[5]=60/(time-lastpeaktime);
                pulse=(temppulse+five_pulses[5])/5;
                lastpeaktime=time;
                percentage=pulse/maxpulse;
                calcSat()
            }
            
//   Saturation            
            
function calcSat(int peaksfound)
{
    max_red=0;
    min_red=0;
    max_IR=0;
    min_IR=0;
    // redSig and IRSig raw signal 400 latest samples

    for(i=0;i<400;i++)
            {
                if (redSig[i]>max_red)
                {
                    max_red=redSig[i];
                }
                else if (redSig[i]<min_red)
                {
                    min_red=redSig[i];
                }
                if (IRSig[i]>max_IR)
                {
                    max_IR=IRSig[i];
                }
                else if (IRSig[i]<min_IR)
                {
                    min_IR=IRSig[i];
                }
            }
            lastR=R
            AC_red=max_red-min_red;
            DC_red=min_red;
            AC_IR=max_IR-min_IR;
            DC_IR=min_IR;
            R=0.8*lastR+0.2*(AC_red/DC_red)/(AC_IR/DC_IR);
            Saturation=alpha*R+beta;
}


// Peak detection alternative, faster?

function findpeak()
{
    if (time>lastpeaktime+delay)
    {
        X=0;
            for(i=0;i<k;i++)
                {
                    if (CalcVector[k-1-i]>CalcVector[k])
                    {
                        break
                    }
                    else if (CalcVector[k+1+i]>CalcVector[k])
                    {
                        break
                    }
                    else
                    {
                     X=i;
                    }
                }
                if (X==k-1)
                {
                    peakfound()
                }
    }
}

function peakfound()
{
  temppulse=0;
  for(i=0;i<5;i++)
  {
        five_pulses[i]=five_pulses[i+1];
        temppulse=temppulse+five_pulses[i];
  }
  five_pulses[5]=60/(time-lastpeaktime);
  pulse=(temppulse+five_pulses[5])/5;
  lastpeaktime=time;
  percentage=pulse/maxpulse;
  calcSat()
}



